service: HuskyFit-API
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs16.x

  environment:
    user_pool_id:
      Ref: UserPool
    client_id:
      Ref: UserClient
    TZ: America/New_York
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'lambda:InvokeFunction'
        - 'cognito-idp:AdminInitiateAuth'
        - 'cognito-idp:AdminCreateUser'
        - 'cognito-idp:AdminSetUserPassword'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource: '*'

resources:
  - '${file(resources/cognito.yml)}'
  - '${file(resources/dynamo.yml)}'

plugins:
  - serverless-offline
  - serverless-add-api-key
  - serverless-plugin-warmup

custom:
  apiKeys:
    - name: noah-api-key

  warmup:
    default:
      enabled: false
      folderName: .warmup
      memorySize: 256
      name: warmer-default
      events:
        - schedule: cron(0/5 13-5 ? * SUN-SAT *)
      package:
        individually: true
        patterns:
          - '!../**'
          - '!../../**'
          - ./**
      timeout: 5
      concurrency: 1

functions:

  getMeals:
    runtime: python3.9
    handler: scraper.lambda_handler
    timeout: 10
    events:
      - http:
          path: '/{dininghall}/{meal}'
          method: post
          private: true
    warmup:
      default:
        enabled: true
        
  Get-Recommendations:
    runtime: python3.9
    handler: mockRec.lambda_handler
    timeout: 10
    events:
      - http:
          path: /recommendation
          method: get
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - sub

  workout:
    handler: workout.handler
    events:
      - http:
          path: /workout
          method: ANY
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - sub

  Food-Logs:
    handler: foodlog.handler
    events:
      - http:
          path: /food-log
          method: ANY
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - sub

  User-Info:
    handler: userInfo.handler
    events:
      - http:
          path: /user-info
          method: ANY
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - sub

  profile:
    handler: profile.handler
    events:
      - http:
          path: /profile
          method: get
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - name
              - email
              - birthdate

  loginUser:
    handler: auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true
          private: true

  signupUser:
    handler: auth/signup.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors: true
          private: true

  privateAPI:
    handler: auth/private.handler
    events:
      - http:
          path: auth/private
          method: post
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - name
              - email
