service: HuskyFit-API
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x

  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
    TZ: America/New_York # Change timezone to EST

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"

resources:
  - ${file(resources/cognito.yml)}

plugins:
  - serverless-offline
  - serverless-add-api-key
  - serverless-plugin-warmup

custom:
  apiKeys:
    - name: noah-api-key

  warmup:
    default:
      enabled: false # disables warmup as default
      folderName: '.warmup'
      memorySize: 256
      name: warmer-default
      events:
        - schedule: 'cron(0/5 13-5 ? * SUN-SAT *)' # 8:00am to 12:00pm EST | Every 5 minutes | UTX
      package:                                     
        individually: true
        patterns:
          - '!../**'
          - '!../../**'
          - ./**
      timeout: 5
      concurrency: 1

functions:
  getMeals:
    runtime: python3.9
    handler: scraper.lambda_handler
    timeout: 10 # lambda will timeout after 10 secs
    events:
      - http:
          path: /{dininghall}/{meal}
          method: get
          private: true
    warmup:
      default:
        enabled: true

  mockGetMeals:
    runtime: python3.9
    handler: mock.lambda_handler
    timeout: 10 # lambda will timeout after 10 secs
    events:
      - http:
          path: /{dininghall}/{meal}/mock
          method: get
          private: true

  profile:
    handler: profile.handler
    events:
      - http:
          path: /profile
          method: get
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
                  - name
                  - email
                  - birthdate

  # login and signup lambdas
  loginUser:
    handler: auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true
          private: true

  signupUser:
    handler: auth/signup.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors: true
          private: true

  privateAPI:
    handler: auth/private.handler
    events:
      - http:
          path: auth/private
          method: post
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
                  - name
                  - email
  